#!/usr/bin/env node

var init = require('../lib/init')
var dist = require('../lib/dist')
var deploy = require('../lib/deploy')
var grunt = require('../lib/grunt')

var commander = require('commander');
commander
  .version(require('../package.json').version)
// .option('-C, --chdir <path>', 'change the working directory')
// .option('-c, --config <path>', 'set config path. defaults to ./fad.conf')

commander
  .command('init')
  .description('run init commands, create fad config file into project')
  .action(function(options) {
    init()
  })

commander
  .command('dist')
  .description('run dist commands, distribute static resources')
  .option("-A, --all", "Run all distribute process, build(grunt), dist, deploy and clean(grunt)")
  .option("-b, --build", "Run grunt build task before dist")
  .option("-c, --clean", "Run grunt clean task after dist")
  .option("-d, --deploy", "Run deploy after dist")
  .action(function(options) {
    if (options.build || options.all) {
      grunt.execute('build', function() {
        dist();
        if(options.deploy || options.all){
          deploy.deploy(options);
        }
        if(options.all || options.clean) {
          grunt.execute('clean')
        }
      })
    } else {
      dist();
      if(options.deploy){
        deploy.deploy(options);
      }
    }
  })

commander
  .command('deploy')
  .description('run deploy commands')
  .option("-s, --sync", "Force sync, used for clean remote directory")
  .action(function(options) {
    deploy.deploy(options)
  });

commander
  .command('upload <local_path>')
  .description('run upload commands')
  .option("-d, --dest_dir <dir>", "Remote destination dir, upload local dir to remote dir with local_path param")
  .action(function(local_path, options) {
    deploy.upload(local_path, options)
  });

commander
  .command('test <env>')
  .description('run test commands, switch static environment fot testing')
  .action(function(env) {
    grunt.execute('grunt_test_' + env)
  });

commander
  .command('grunt [task]')
  .description('run grunt task commands')
  .action(function(task) {
    task = task || '';
    grunt.execute(task)
  });


commander.parse(process.argv);

if (!commander.args.length) {
  commander.help();
}
